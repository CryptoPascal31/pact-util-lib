;SPDX-License-Identifier: MIT

(begin-tx)
(load "../contracts/util-lists.pact")
(load "../contracts/util-math.pact")
(commit-tx)

(begin-tx)
(use util-math)

(print (format "Testing util-math: Version:{}\n \
                \                  Hash:{}" [VERSION, (at 'hash (describe-module 'util-math)) ]))

(expect-that "Pi=3.14" (between 3.14 3.15) PI)
(expect-that "E=2.71" (between 2.71 2.72) E)
(expect-that "PHI=1.61" (between 1.61 1.62) GOLDEN-RATIO)

;;; (min ...)
(expect "(min 3.0 4.0) => 3.0" 3.0 (min 3.0 4.0))
(expect "(min 4.0 3.0) => 3.0" 3.0 (min 4.0 3.0))

;;; (min3 ...)
(expect "(min3 1.0 3.0 4.0) => 1.0" 1.0 (min3 1.0 3.0 4.0))
(expect "(min3 4.0 3.0 1.0) => 1.0" 1.0 (min3 4.0 3.0 1.0))
(expect "(min3 4.0 1.0 3.0) => 1.0" 1.0 (min3 4.0 1.0 3.0))

;;; (min4 ...)
(expect "(min4 1.0 3.0 4.0 6.0) => 1.0" 1.0 (min4 1.0 3.0 4.0 6.0))
(expect "(min4 4.0 3.0 1.0 6.0) => 1.0" 1.0 (min4 4.0 3.0 1.0 6.0))
(expect "(min4 4.0 3.0 6.0 1.0) => 1.0" 1.0 (min4 4.0 3.0 6.0 1.0))

;;; (min-list ...)
(expect-failure "Empty list "(min-list []))
(expect "(min-list [1.0]) =>1.0" 1.0 (min-list [1.0]))
(expect "(min-list [1.0 2.0]) =>1.0" 1.0 (min-list [1.0 2.0]))
(expect "(min-list [2.0 1.0]) =>1.0" 1.0 (min-list [2.0 1.0]))
(expect "(min-list [2.0 1.0 3.0 4.0 26.0 -1.0]) =>-1.0" -1.0 (min-list [2.0 1.0 3.0 4.0 26.0 -1.0]) )


;;; (amin ...)
(expect-failure "Empty list "(amin []))
(expect "(amin [1.0]) =>0" 0 (amin [1.0]))
(expect "(amin [1.0 -1.0]) =>1" 1 (amin [1.0 -1.0]))
(expect "(amin [3.0 1.0 4.0]) =>1" 1 (amin [3.0 1.0 4.0]))
(expect "(amin [3.0 1.0 9.0 0.0 -2.0 -1.0]) =>4" 4 (amin [3.0 1.0 9.0 0.0 -2.0 -1.0]))

;; (max ....)
(expect "(max 3.0 4.0) => 3.0" 4.0 (max 3.0 4.0))
(expect "(max 4.0 3.0) => 3.0" 4.0 (max 4.0 3.0))

;;; (max3 ....)
(expect "(max3 1.0 3.0 4.0) => 4.0" 4.0 (max3 1.0 3.0 4.0))
(expect "(max3 4.0 3.0 1.0) => 4.0" 4.0 (max3 4.0 3.0 1.0))
(expect "(max3 1.0 4.0 3.0) => 4.0" 4.0 (max3 1.0 4.0 3.0))

;;; (max4 ....)
(expect "(max4 1.0 3.0 4.0 6.0) => 6.0" 6.0 (max4 1.0 3.0 4.0 6.0))
(expect "(max4 4.0 3.0 1.0 6.0) => 6.0" 6.0 (max4 4.0 3.0 1.0 6.0))
(expect "(max4 4.0 3.0 6.0 1.0) => 6.0" 6.0 (max4 4.0 3.0 6.0 1.0))

;;; (max-list ...)
(expect-failure "Empty list "(max-list []))
(expect "(max-list [1.0]) =>1.0" 1.0 (max-list [1.0]))
(expect "(max-list [1.0 2.0]) =>2.0" 2.0 (max-list [1.0 2.0]))
(expect "(max-list [2.0 1.0]) =>2.0" 2.0 (max-list [2.0 1.0]))
(expect "(max-list [2.0 1.0 3.0 4.0 26.0 -1.0]) =>26.0" 26.0 (max-list [2.0 1.0 3.0 4.0 26.0 -1.0]) )


;;; (amax ...)
(expect-failure "Empty list "(amax []))
(expect "(amax [1.0]) =>0" 0 (amax [1.0]))
(expect "(amax [-1.0 1.0]) =>0" 1 (amax [-1.0 1.0]))
(expect "(amax [3.0 1.0 4.0]) =>2" 2 (amax [3.0 1.0 4.0]))
(expect "(amax [3.0 1.0 9.0 0.0 -2.0 -1.0]) =>2" 2 (amax [3.0 1.0 9.0 0.0 -2.0 -1.0]))

;;; (sum3 ....)
(expect "(sum3 3.0 4.0 5.0) => 12.0" 12.0 (sum3 3.0 4.0 5.0))

;;;; (sum4 ...)
(expect "(sum4 3.0 4.0 5.0 10.0) => 22.0" 22.0 (sum4 3.0 4.0 5.0 10.0))

;;; (sum ....)
(expect "(sum [3.0 4.0 5.0]) => 12.0" 12.0 (sum [3.0 4.0 5.0]))


;;; (prod3 ....)
(expect "(prod3 3.0 4.0 5.0) => 60.0" 60.0 (prod3 3.0 4.0 5.0))

;;;; (prod4 ...)
(expect "(prod4 3.0 4.0 5.0 10.0) => 600.0" 600.0 (prod4 3.0 4.0 5.0 10.0))

;;; (prod ....)
(expect "(prod [3.0 4.0 5.0]) => 60.0" 60.0 (prod [3.0 4.0 5.0]))

;;; (square ....)
(expect "(square 3.0) => 9.0" 9.0 (square 3.0))

;;;; (safe-/ ....)
(expect "(safe-/ 1.0 2.0 8.0) => 0.5" 0.5 (safe-/ 1.0 2.0 8.0))
(expect "(safe-/ 1.0 0.0 8.0) => 8.0" 8.0 (safe-/ 1.0 0.0 8.0))

;;; (avg ....)
(expect-failure "Empty list" "empty" (avg []))
(expect "(avg [3.0 4.0 8.0]) => 5.0" 5.0 (avg [3.0 4.0 8.0]))

;;; (med ...)
(expect-failure "Empty list" "empty" (med []))
(expect "(med [4.0]) => 4.0" 4.0 (med [4.0]))
(expect "(med [3.0 4.0 8.0]) => 4.0" 4.0 (med [3.0 4.0 8.0]))
(expect "(med [9.0 3.0 4.0 8.0]) => 4.0" 4.0 (med [9.0 3.0 4.0 8.0]))
(expect "(med [6.0 9.0 3.0 4.0 8.0]) => 6.0" 6.0 (med [6.0 9.0 3.0 4.0 8.0]))

;;; (med* ...)
(expect-failure "Empty list" "empty" (med []))
(expect "(med* [4.0]) => 4.0" 4.0 (med* [4.0]))
(expect "(med* [3.0 4.0 8.0]) => 4.0" 4.0 (med* [3.0 4.0 8.0]))
(expect "(med* [9.0 3.0 4.0 5.0]) => 4.5" 4.5 (med* [9.0 3.0 4.0 5.0]))
(expect "(med [6.0 9.0 3.0 4.0 8.0]) => 6.0" 6.0 (med* [6.0 9.0 3.0 4.0 8.0]))

;;; (between ...)
(expect "(between 1.0 2.0 1.5) => true)" true (between 1.0 2.0 1.5))
(expect "(between 1.0 2.0 0.5) => true)" false (between 1.0 2.0 0.5))
(expect "(between 1.0 2.0 2.5) => true)" false (between 1.0 2.0 2.5))

;;; (sign...)
(expect "(sign 3.0) => 1.0)" 1.0 (sign 3.0))
(expect "(sign 0.0) => 0.0)" 0.0 (sign 0.0))
(expect "(sign -3.0) => -1.0)" -1.0 (sign -3.0))

;;; (sizeof ....)
(expect-failure "Does not accept negative numbers" "negative numbers" (sizeof -1))
(expect "(sizeof 0) => 0" 1 (sizeof 0))
(expect "(sizeof 1) => 1" 1 (sizeof 1))
(expect "(sizeof 255) => 1" 1 (sizeof 255))
(expect "(sizeof 256) => 2" 2 (sizeof 256))
(expect "(sizeof 65535) => 2" 2 (sizeof 65535))
(expect "(sizeof 65556) => 3" 3 (sizeof 65536))
(expect "(sizeof (shift 1 31)) => 4" 4 (sizeof (shift 1 31)))
(expect "(sizeof (- (shift 1 32)) 1) => 4" 4 (sizeof (- (shift 1 32) 1)))
(expect "(sizeof (shift 1 32)) => 5" 5 (sizeof (shift 1 32)))

;;: (++ ...)
(expect "(++ 1) => 2" 2 (++ 1))
(expect "(++ 10) => 11" 11 (++ 10))
(expect "(++ -1) => 0" 0 (++ -1))

;;; (-- ...)
(expect "(-- 1) => 0" 0 (-- 1))
(expect "(-- 10) => 9" 9 (-- 10))
(expect "(++ 0) => -1" -1 (-- -1))

;;; (gcd ...)
(expect "GCD (0, 0) = 0" 0 (gcd 0 0))
(expect "GCD (31, 0) = 31" 31 (gcd 31 0))
(expect "GCD (-31, 0) = 31" 31 (gcd -31 0))
(expect "GCD (0, 31) = 31" 31 (gcd 0 31))
(expect "GCD (26, 1) = 1" 1 (gcd 26 1))
(expect "GCD (1, 26) = 1" 1 (gcd 1 26))
(expect "GCD (21, 9) = 3" 3 (gcd 21 9))
(expect "GCD (9, 21) = 3" 3 (gcd 9 21))
(expect "GCD (-9, 21) = 3" 3 (gcd -9 21))
(expect "GCD (9, -21) = 3" 3 (gcd 9 -21))
(expect "GCD (-9, -21) = 3" 3 (gcd -9 -21))
; Test some prime numbers
(expect "GCD (44, 21) = 1" 1 (gcd 44 21))
(expect "GCD (21, 44) = 1" 1 (gcd 21 44))

; Test some fibonnacci numbers (worst cases for the euclidean algo)
(expect "GCD (222232244629420445529739893461909967206666939096499764990979600,137347080577163115432025771710279131845700275212767467264610201) = 1"
        1 (gcd 222232244629420445529739893461909967206666939096499764990979600 137347080577163115432025771710279131845700275212767467264610201))
(expect "GCD (137347080577163115432025771710279131845700275212767467264610201, 222232244629420445529739893461909967206666939096499764990979600) = 1"
        1 (gcd 137347080577163115432025771710279131845700275212767467264610201 222232244629420445529739893461909967206666939096499764990979600))
(expect "GCD (37889062373143906, 52461916524905785334311649958648296484733611329035169538240802) = 196418"
        196418 (gcd 37889062373143906 52461916524905785334311649958648296484733611329035169538240802 ))
(expect "GCD (52461916524905785334311649958648296484733611329035169538240802, 37889062373143906) = 196418"
        196418 (gcd 52461916524905785334311649958648296484733611329035169538240802 37889062373143906))

;;; (lcm ...)
(expect-failure  "LCM of 0 must fail" "can't be 0" (lcm 0 3))
(expect-failure  "LCM of 0 must fail" "can't be 0" (lcm 3 0))
(expect "LCM (26, 1) = 26" 26 (lcm 26 1))
(expect "LCM (1, 26) = 26" 26 (lcm 1 26))
(expect "LCM (6, 16) = 48" 48 (lcm 6 16))
(expect "LCM (16, 6) = 48" 48 (lcm 16 6))
; Test some prime numbers
(expect "LCM (44, 21) = 924" 924 (lcm 44 21))
(expect "LCM (21, 44) = 924" 924 (lcm 21 44))
; Test Negatives
(expect "LCM (-44, 21) = 924" 924 (lcm -44 21))
(expect "LCM (-21, 44) = 924" 924 (lcm -21 44))
(expect "LCM (-44, -21) = 924" 924 (lcm -44 -21))

; Test some fibonnacci numbers (worst cases for the euclidean algo)
; These 2 are prime
(expect "LCM (222232244629420445529739893461909967206666939096499764990979600,137347080577163115432025771710279131845700275212767467264610201) = (A*B)"
         (* 222232244629420445529739893461909967206666939096499764990979600 137347080577163115432025771710279131845700275212767467264610201) (lcm 222232244629420445529739893461909967206666939096499764990979600 137347080577163115432025771710279131845700275212767467264610201))
(expect "LCM (137347080577163115432025771710279131845700275212767467264610201, 222232244629420445529739893461909967206666939096499764990979600) = (A*B)"
         (* 222232244629420445529739893461909967206666939096499764990979600 137347080577163115432025771710279131845700275212767467264610201) (lcm 137347080577163115432025771710279131845700275212767467264610201 222232244629420445529739893461909967206666939096499764990979600))



;; (pow10 ...)
(expect "(pow10 3) => 1000.0)" 1000.0 (pow10 3))
(expect "(pow10 -3) => 0.001)" 0.001 (pow10 -3))
(expect "(pow10 -12) => 0.000000000001)" 0.000000000001 (pow10 -12))

;; (xEy ...)
(expect "(xEy 1.0 3) => 1000.0)" 1000.0 (xEy 1.0 3))
(expect "(xEy 2.5 -3) => 0.0025)" 0.0025 (xEy 2.5 -3))
(expect "(xEy 2.5 -12) => 0.000000000002)" 0.000000000002 (xEy 2.5 -12))

;; (log10 ...)
(expect "(log10 1.0) => 0.0" 0.0 (log10 1.0))
(expect "(log10 10000.0) => 4.0" 4.0 (log10 10000.0))
(expect "(log10 0.01) => -2.0" -2.0 (log10 0.01))
(expect "(log10 0.00000001) => -8.0" -8.0 (log10 0.00000001))
(expect-failure "Negative log should fail" (log10 -3.0))
(expect "(log10 1) => 0.0" 0.0 (log10 1)) ;Should work with integers too
(expect "(log10 100) => 2.0" 2.0 (log10 100)) ;Should work with integers too
(expect-that "(log10 20 0.0) => 1.3xxxx" (between 1.3 1.4) (log10 20)) ;Should work with integers too

;; (safe-log ....)
(expect "(safe-log 2 1.0 0.0) => 0.0" 0.0 (safe-log 2 1.0 0.0))
(expect "(safe-log 2 8.0 0.0) => 3.0" 3.0 (safe-log 2 8.0 0.0))
(expect "(safe-log 2 0.0 0.0) => 0.0" 0.0 (safe-log 2 0.0 0.0))
(expect "(safe-log 2 -2.0 0.0) => 0.0" 0.0 (safe-log 2 -2.0 0.0))
(expect "(safe-log 2 8 0) => 3" 3 (safe-log 2 8 0)) ;Should work with integers too
(expect "(safe-log 2 -2 0.0) => 0.0" 0.0 (safe-log 2 -2 0.0))
(expect "(safe-log 2 -2 3.0) => 3.0" 3.0 (safe-log 2 -2 3.0))

;; (safe-ln ....)
(expect "(safe-ln  1.0 0.0) => 0.0" 0.0 (safe-ln 1.0 0.0))
(expect-that "(safe-ln E 0.0) => 1.0" (between 0.99 1.01) (safe-ln E 0.0))
(expect "(safe-ln  0.0 0.0) => 0.0" 0.0 (safe-ln 0.0 0.0))
(expect "(safe-ln  -2.0 0.0) => 0.0" 0.0 (safe-ln -2.0 0.0))
(expect "(safe-ln  -2.0 3.0) => 3.0" 3.0 (safe-ln -2.0 3.0))

;; (safe-log10 ...)
(expect "(safe-log10 1.0 0.0) => 0.0" 0.0 (safe-log10 1.0 0.0))
(expect "(safe-log10 10000.0 0.0) => 4.0" 4.0 (safe-log10 10000.0 0.0))
(expect "(safe-log10 0.01 0.0) => -2.0" -2.0 (safe-log10 0.01 0.0))
(expect "(safe-log10 0.00000001 0.0) => -8.0" -8.0 (safe-log10 0.00000001 0.0))
(expect "(safe-log10 1 0.0) => 0.0" 0.0 (safe-log10 1 0.0)) ;Should work with integers too
(expect "(safe-log10 100 0.0) => 2.0" 2.0 (safe-log10 100 0.0)) ;Should work with integers too
(expect-that "(safe-log10 20 0.0) => 1.3xxxx" (between 1.3 1.4) (safe-log10 20 0.0)) ;Should work with integers too
(expect "(safe-log10 -2.0 0.0) => 0.0" 0.0 (safe-log10 -2.0 0.0))
(expect "(safe-log10 -2.0 3.0) => 3.0" 3.0 (safe-log10 -2.0 3.0))


(print "Tests of util-math ended")
(commit-tx)
