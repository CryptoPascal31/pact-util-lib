;SPDX-License-Identifier: MIT
(begin-tx)
(load "../contracts/util-lists.pact")
(load "../contracts/util-strings.pact")
(commit-tx)

(begin-tx)
(use util-strings)
(print (format "Testing util-strings: Version:{}\n \
                \                     Hash:{}" [VERSION, (at 'hash (describe-module 'util-strings)) ]))

;to-string
(expect "Str -> Str" "Hello" (to-string "Hello"))
(expect "Integer -> Str" "38" (to-string 38))
(expect "Decimal -> Str" "22.34" (to-string 22.34))
(expect "List of integer -> Str" "[1 2 3 4]" (to-string [1,2,3,4]))
(expect "Object -> Str" "{\"a\": 3,\"b\": \"Abcd\",\"c\": 42.001}" (to-string {'a:3, 'b:"Abcd", 'c:42.001}))


; decode-ascii
(expect-that "Hello world decoding" (= [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])
                                    (decode-ascii "Hello world"))

(expect-that "Special characters decoding" (= [34, 39, 36, 93])
                                           (decode-ascii "\"\'$]"))

; str-to-ascii-int
(expect "Empty string must be 0" 0 (str-to-ascii-int ""))
(expect "99 must be 0x3939" 14649 (str-to-ascii-int "99"))
(expect "Hello Kadena must be 0x48656c6c6f204b6164656e61" 22405534230753915396277235297 (str-to-ascii-int "Hello Kadena"))

;encode-ascii
(expect-that "Hello world encoding" (= "Hello world")
                                    (encode-ascii [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]))

(expect-that "Special characters encoding" (= "\"\'$]")
                                    (encode-ascii [34, 39, 36, 93]))

(expect-that "Unprintable and non ascii chars shoud be removed" (= "Hello world")
                                                                (encode-ascii [1, 2, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100,3, 254]))


;ascii-int-to-str
(expect-failure "Negative integers not allowed" "Negative integers not allowed" (ascii-int-to-str -1))
(expect "0 must be empty string" "" (ascii-int-to-str 0))
(expect "0x3939 must be 99 " "99" (ascii-int-to-str 14649))
(expect "0x48656c6c6f204b6164656e61 must be Hello Kadena" "Hello Kadena" (ascii-int-to-str 22405534230753915396277235297))

; Upper
(expect-that "Hello world to upper" (= "HELLO, WORLD!") (upper "Hello, World!"))
(expect-that "azerty to upper" (= "AZERTY") (upper "azerty"))

; Lower
(expect-that "Hello world to lower" (= "hello, world!") (lower "Hello, World!"))
(expect-that "AZERTY to lower" (= "azerty") (lower "AZERTY"))

;is-digit
(expect "12093 is digit" true (is-digit "12093"))
(expect "12093a is not digit" false (is-digit "12093a"))
(expect "12093_ is not digit" false (is-digit "12093_"))
(expect "_12093 is not digit" false (is-digit "_12093"))

;is-alpha
(expect "Alpha is alpha" true (is-alpha "Alpha"))
(expect "Alpha, is not alpha" false (is-alpha "Alpha,"))
(expect "AlphazZ is alpha" true (is-alpha "AlphazZ"))
(expect "1Alpha is not alpha" false (is-alpha "1Alpha"))

;is-hex-digit
(expect "A36 is hex" true (is-hex-digit "A36"))
(expect "a36 is hex" true (is-hex-digit "a36"))
(expect "f36 is hex" true (is-hex-digit "f36"))
(expect "30F is hex" true (is-hex-digit "30F"))
(expect "30G is not hex" false (is-hex-digit "30G"))
(expect "30F, is not hex" false (is-hex-digit "30F,"))


;replace-chars
(expect-that "Replace b->X in baobab should result in XaoXaX" (= "XaoXaX")
                                                              (replace-char "baobab" "b" "X"))

(expect-that "Replace b->   in baobab should result in aoa" (= "aoa")
                                                            (replace-char "baobab" "b" ""))

(expect-that "Replace B->X in baobab should result in baoab (no replacement)" (= "baobab")
                                                                              (replace-char "baobab" "B" "X"))

; char-at
(expect-that "String at 0 of baobab is b" (= "b")
                                          (char-at 0 "baobab"))

(expect-that "String at 2 of baobab is o" (= "o")
                                          (char-at 2 "baobab"))

(expect-that "String at 5 of baobab is b" (= "b")
                                          (char-at 5 "baobab"))


; join
(expect-that "Join strings empty" (= "") (join "-" []))

(expect-that "Join only string" (= "Hello") (join "-" ["Hello"]))

(expect-that "Join 2 strings" (= "Hello/World") (join "/" ["Hello", "World"]))

(expect-that "Join 3 strings" (= "Hello/Boys/Girls") (join "/" ["Hello", "Boys", "Girls"]))

(expect-that "Join 4 strings" (= "Hello/Boys/Girls/Kids") (join "/" ["Hello", "Boys", "Girls", "Kids"]))

(expect-that "Join 4 strings with an empty separator" (= "HelloBoysGirlsKids") (join "" ["Hello", "Boys", "Girls", "Kids"]))

(expect-that "Join 4 strings with an 5chars separator separator" (= "Hello And Boys And Girls And Kids") (join " And " ["Hello", "Boys", "Girls", "Kids"]))

;split
(expect-that "Split ab/cd/ef" (= ["ab", "cd" , "ef"]) (split "/" "ab/cd/ef"))

(expect-that "Split ab (one element)" (= ["ab"]) (split "/" "ab"))

(expect-that "Split ab/ (last element empty)" (= ["ab", ""]) (split "/" "ab/"))

(expect-that "Split Empty string" (= []) (split "/" ""))

;starts-with
(expect "Kadena is great starts with Kadena" true (starts-with "Kadena is great" "Kadena"))
(expect "Kadena is great doesn't start with Solana" false (starts-with "Kadena is great" "Solana"))
(expect "aKadena is great doesn't start with Kadena" false (starts-with "aKadena is great" "Kadena"))
(expect "Kadena starts with Kadena" true (starts-with "Kadena" "Kadena"))
(expect "Kade doesn't start with Kadena" false (starts-with "Kade" "Kadena"))

;ends-with
(expect "Kadena is great ends with great" true (ends-with "Kadena is great" "great"))
(expect "Kadena is great doesn't end with bad" false (ends-with "Kadena is great" "bad"))
(expect "Kadena is greater doesn't end with great" false (ends-with "Kadena is greater" "great"))
(expect "adena doesn't end with Kadena" false (ends-with "adena" "Kadena"))
(expect "Kadena ends with Kadena" true (ends-with "Kadena" "Kadena"))

; left-strip
(expect-that "Strip Hello world with leading spaces should remove them" (= "Hello world ") (left-strip " " "    Hello world "))
(expect-that "Strip and empty string" (= "") (left-strip " " ""))
(expect-that "Strip and empty string with whitespaces" (= "") (left-strip " " "                   "))

; right-strip
(expect-that "Strip Hello world with trailing spaces should remove them" (= " Hello world") (right-strip " " " Hello world    "))
(expect-that "Strip and empty string" (= "") (right-strip " " ""))
(expect-that "Strip and empty string with whitespaces" (= "") (right-strip " " "                   "))

; strip
(expect-that "Strip Hello world with leading and trailing spaces should remove them" (= "Hello world") (strip " " "    Hello world "))
(expect-that "Strip and empty string" (= "") (strip " " ""))
(expect-that "Strip and empty string with whitespaces" (= "") (strip " " "                   "))

; deciimal-to-str
(expect "Convert 3.14" "3.14" (decimal-to-str 3.14 2))
(expect "Convert 3.14" "3.140000000000" (decimal-to-str 3.14 12))
(expect "Convert 3.14" "3.1" (decimal-to-str 3.14 1))
(expect "Convert 3.14" "-3.1" (decimal-to-str -3.14 1))
(expect "Convert 0.0" "0.0" (decimal-to-str 0.0000 1))


; str-to-decimal
(expect "Convert 3.14" 3.14 (str-to-decimal "3.14"))
(expect "Convert 0.14186" 0.14186 (str-to-decimal "0.14186"))
(expect "Convert 100.0" 100.0 (str-to-decimal "100.0"))
(expect "Convert 100" 100.0 (str-to-decimal "100"))
(expect "Convert 0" 0.0 (str-to-decimal "0"))
(expect "Convert -3.14" -3.14 (str-to-decimal "-3.14"))


(print "Tests of util-strings ended")
(commit-tx)
