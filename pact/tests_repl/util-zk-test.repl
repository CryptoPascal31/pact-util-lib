;SPDX-License-Identifier: MIT

;(enforce-pact-version "4.6.0")

(begin-tx)
(load "../contracts/util-lists.pact")
(load "../contracts/util-strings.pact")
(load "../contracts/util-zk.pact")
(commit-tx)

(begin-tx)
(use util-zk)
(use util-strings)
(let ((proof:object{groth16-proof} {'A:{ 'x:17899149025429256540670503450603840524526341770363252849540840688855727610005,
                                         'y:6794888886586012478899094699714874747255503821264355877996121220781692052981},
                                    'B:{ 'x:[4555160965165375385578562333880156835913586562443164694386914449127412126755, 16845220796436439159658389520454136502557317448502144055381480626643346396453],
                                         'y:[15740922883530394503972296892303076718862447518810507376564218784428077030254, 9794083499477745551885635852864140214811154513402172713835626845455029169909]},
                                    'C: {'x:2188339130061078784977610313576641337709587353412678866175084864819379744795
                                        ,'y:7363399164077520072321162032202323356331016580445157674442815097597932017402}}))


  (print (concat ["Serialized proof:\n" (serialize-proof proof)]))
  (expect "Length of the serialized proof should be 344" 344  (length (serialize-proof proof)))
  (expect-that "After -> serialize/unserialize, we should recover the original" (= proof)  (deserialize-proof (serialize-proof proof)))

)

;(print (to-string (deserialize-proof "J5KPMJJp-t5MX_VDihVPa1pnaJaiPQb40em6Sb_WGJUDwXFVIN849MbSIvMV3oYdzpuz9yAvuWniXmZJk5WZfUChIhNrGRg36cfcPZL98cHMTCRrSd_6HhhTyWQ_MY1CMJT4OneDYEwY-Z4r9t84PwVrAntjY9k264yYtgS50FSUIs0L78VX8jCJpPcgBNysJpi0fghfIRwgIhFCWmQ7G24FadBO5DrTJZqCVbFb0MU-dYt7j4X_mOdy7BlHYbg7vUBNaOWZwxKVTlnrOdVC3L3M75fMC9u5TS_Lx1YxGqsBsEEeJRrGRtLcCzka6Tg2muE13-egR_CfGnqnyuYbrFvo")))
