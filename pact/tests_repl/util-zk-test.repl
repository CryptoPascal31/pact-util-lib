;SPDX-License-Identifier: MIT
(enforce-pact-version "5.3")

(begin-tx)
(load "../contracts/util-lists.pact")
(load "../contracts/util-math.pact")
(load "../contracts/util-strings.pact")
(load "../contracts/util-zk.pact")
(commit-tx)

(begin-tx)
(use util-zk)
(module test-vectors GOV
  (defcap GOV () true)


  (defconst VERIFY-KEY-A:object{groth16-verify-key}
    {
   "alpha":{
    "x":19093190915208125244555748330114739984306915098521080531901596534619159759207,
    "y":18145049329929754722849713671551365977004476324122187934529544876321031221397
   },
   "beta":{
    "x":[
     9571251499721443564970735120447814861675838004163181887567382728158387874823,
     17690001379947796285262582208534824731518998633098479808469761032413111392419
    ],
    "y":[
     18245424278937739426312235776449294904672337680891080301329732361940180947705,
     4228524357947392453936116184326574847085364402787922147139966018050381094963
    ]
   },
   "gamma":{
    "x":[
     9957391484265410050548400066906457658941525423933921013918184244471473186447,
     15853235560322493240070789784525335625997622189966865614826689011823343460867
    ],
    "y":[
     18931338475953009526182873039717638711800888632125587267442452939941579515813,
     12151609037147557545629674377713039475473367194646909814375386525742677920279
    ]
   },
   "delta":{
    "x":[
     4608470983063366878536988946310237807937688140401158312823419473013084637119,
     3070462498430186883337370276075913467292287874779912165602036643339485584452
    ],
    "y":[
     10030746180938231131103811633942674875284466550937140039194366286979459839297,
     15412204991153383487556581318348365838085235183769313823336870720562569789705
    ]
   },
   "ic":[
    {
     "x":2637348763933172794660296612913068603581947866174025789701189933968603696133,
     "y":1017904676462282467101605543305086597321854888010778185406395810725562063271
    },
    {
     "x":20338803908676338963913895515690910200413476128103531425908331306058695774964,
     "y":5818720796335494468269145899047103715176775622331508586154541638568267969572
    },
    {
     "x":19796596280720245579434952018382320394353193052183208172747380996092359542026,
     "y":6751478110098115853482067718109641138138703846099243428006443560824480280977
    }
   ]
  })

  (defconst INPUT-DATA-A:[integer] [123456789123456789 15241578780674120244014104481782084])

  (defconst INPUT-DATA-A-BAD:[integer] [123456789123456799, 15241578780674120244014104481782084])

  (defconst INPUT-DATA-A-INVALID:[integer] [293440811465879871736579011234159205258, 123446548874654888668888466886458273532918766888888999999222254304797954025540247337640])

  (defconst PROOF-A-GOOD:object{groth16-proof}
  {
  "A": {
    "x": 17150373016012049297839373316949509801414764702704720651891551942348566841388,
    "y": 19280796864920683086283896476532402941590619358127759591643550468675584256316
  },
  "B": {
    "x": [
      8949464796489023391339710762611329364208493339636394951133914746585293603910,
      13762716222215060820346768582785306038462106829431214338986495750300382415687
    ],
    "y": [
      11892887020402721092517232362168774649114284717758998098260481651723176135630,
      12090118925408159241629219365391924808342266514676238086725213755657520550418
    ]
  },
  "C": {
    "x": 20549526256075441586826497691001454027940388422722958177947457345542522875060,
    "y": 2974001028673310464116261379282143734877764802665907843101263353961537530922
  }
  })

  ; Lets change C
  (defconst PROOF-A-BAD:object{groth16-proof}
  {
  "A": {
    "x": 20549526256075441586826497691001454027940388422722958177947457345542522875060,
    "y": 2974001028673310464116261379282143734877764802665907843101263353961537530922
  },
  "B": {
    "x": [
      8949464796489023391339710762611329364208493339636394951133914746585293603910,
      13762716222215060820346768582785306038462106829431214338986495750300382415687
    ],
    "y": [
      11892887020402721092517232362168774649114284717758998098260481651723176135630,
      12090118925408159241629219365391924808342266514676238086725213755657520550418
    ]
  },
  "C": {
    "x": 20549526256075441586826497691001454027940388422722958177947457345542522875060,
    "y": 2974001028673310464116261379282143734877764802665907843101263353961537530922
  }
  })

  ;Let's change a single digit
  (defconst PROOF-A-CORRUPTED:object{groth16-proof}
  {
  "A": {
    "x": 17150373016012049297839373316949509801414764702704720651891551942348566841389,
    "y": 19280796864920683086283896476532402941590619358127759591643550468675584256316
  },
  "B": {
    "x": [
      8949464796489023391339710762611329364208493339636394951133914746585293603910,
      13762716222215060820346768582785306038462106829431214338986495750300382415687
    ],
    "y": [
      11892887020402721092517232362168774649114284717758998098260481651723176135630,
      12090118925408159241629219365391924808342266514676238086725213755657520550418
    ]
  },
  "C": {
    "x": 20549526256075441586826497691001454027940388422722958177947457345542522875060,
    "y": 2974001028673310464116261379282143734877764802665907843101263353961537530922
  }
  })


  (defconst TEST-POINT-A:object{point-G1}  {'x: 17899149025429256540670503450603840524526341770363252849540840688855727610005,
                                            'y: 6794888886586012478899094699714874747255503821264355877996121220781692052981})

  (defconst TEST-POINT-A-NEG:object{point-G1}  {'x: 17899149025429256540670503450603840524526341770363252849540840688855727610005,
                                                'y: -6794888886586012478899094699714874747255503821264355877996121220781692052981})

)
(commit-tx)


(begin-tx)
(use util-zk)
(use test-vectors)

; Proofs serializations
(print (concat ["Serialized proof:\n" (serialize-proof PROOF-A-GOOD)]))
(expect "Length of the serialized proof should be 344" 344  (length(serialize-proof PROOF-A-GOOD)))
(expect-that "After -> serialize/unserialize, we should recover the original" (= PROOF-A-GOOD)  (deserialize-proof (serialize-proof PROOF-A-GOOD)))

; Neg G1
(expect "Negative of a point" TEST-POINT-A-NEG (neg-G1 TEST-POINT-A))


;; Verify proof
(expect "Good proof must be accapted" true (verify-groth16-proof VERIFY-KEY-A INPUT-DATA-A PROOF-A-GOOD))

(expect "Bad proof must be refused" false (verify-groth16-proof VERIFY-KEY-A INPUT-DATA-A PROOF-A-BAD))

(expect-failure "A corrupted proof should fail" "outside of elliptic curve" (verify-groth16-proof VERIFY-KEY-A INPUT-DATA-A PROOF-A-CORRUPTED))

(expect-failure "Missing input data" "number of inputs" (verify-groth16-proof VERIFY-KEY-A (drop 1 INPUT-DATA-A) PROOF-A-GOOD))

(expect "Bad input data must be refused" false (verify-groth16-proof VERIFY-KEY-A INPUT-DATA-A-BAD PROOF-A-GOOD))

(expect-failure "Invalid input data musy throw a faolure" "Invalid" (verify-groth16-proof VERIFY-KEY-A INPUT-DATA-A-INVALID PROOF-A-GOOD))

(print "Tests of util-zk ended")
(commit-tx)
