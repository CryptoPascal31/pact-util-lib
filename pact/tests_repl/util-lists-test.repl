;SPDX-License-Identifier: MIT
(enforce-pact-version "4.8")
(begin-tx)
(load "../contracts/util-lists.pact")
(commit-tx)

(begin-tx)

(use util-lists)
(print (format "Testing utils-list: Version:{}\n \
                \                   Hash:{}" [VERSION, (at 'hash (describe-module 'util-lists)) ]))


; chain
(expect-that "Chained lists" (= ["a", "b", "c", "d"]) (chain [ ["a", "b"], ["c", "d"]]))
(expect-that "Chained lists with empty first" (= ["c", "d"]) (chain [ [], ["c", "d"]]))
(expect-that "Chained lists with empty last" (= ["a", "b"]) (chain [ ["a", "b"], []]))

;enumerate-list
(expect-that "Enumerated list" (= [{'i:0,'v:"a"}, {'i:1,'v:"b"},{'i:2,'v:"c"}]) (enumerate-list ["a" ,"b", "c"]))
(expect-that "Enumerated single element list" (= [{'i:0,'v:"a"}]) (enumerate-list ["a"]))
(expect-that "Enumerated empty list" (= []) (enumerate-list []))

; first
(expect-failure "Empty list must fail" "empty" (first []))
(expect-that "First item is a " (= "a") (first ["a", "b", "c", "d"]))
(expect-that "First item is a " (= "a") (first ["a"]))

; last
(expect-failure "Empty list must fail" "empty" (last []))
(expect-that "Last item is d " (= "d") (last ["a", "b", "c", "d"]))
(expect-that "Last item is a " (= "a") (last ["a"]))

; at*
(expect-failure "Index can't be negative" "negative" (at* ["a" "b" "c"] -1 "def"))
(expect "At first element" "a" (at* ["a" "b" "c"] 0 "def"))
(expect "At second element" "b" (at* ["a" "b" "c"] 1 "def"))
(expect "At 3rd element" "c" (at* ["a" "b" "c"] 2 "def"))
(expect "At 4th element" "def" (at* ["a" "b" "c"] 3 "def"))
(expect "At 5th element" "def" (at* ["a" "b" "c"] 4 "def"))

; search
(expect-that "Search target position is 1" (= [1]) (search ["a", "target", "b", "c"] "target" ))
(expect-that "Search target position is 1 and 2" (= [1,2]) (search ["a", "target", "target", "b", "c"] "target" ))
(expect-that "Search target is not present" (= []) (search ["a", "b", "c"] "target" ))
(expect-that "Search target is at first and last" (= [0,4]) (search ["target","a", "b", "c", "target"] "target" ))

;count
(expect-that "Count of d is 0" (= 0) (count ["a","b","c","b","c","c"] "d"))
(expect-that "Count of a is 1" (= 1) (count ["a","b","c","b","c","c"] "a"))
(expect-that "Count of b is 2" (= 2) (count ["a","b","c","b","c","c"] "b"))
(expect-that "Count of c is 3" (= 3) (count ["a","b","c","b","c","c"] "c"))

;make-list-like
(expect-that "Make list of size 5" (= [1.0 1.0 1.0 1.0 1.0]) (make-list-like [2.0 2.0 2.0 2.0 2.0] 1.0))
(expect-that "Make list of size 0" (= []) (make-list-like [] 1.0))

;extend
(expect-that "Extend a list to 4 elements" (= [2.0 2.0 1.0 1.0]) (extend [2.0 2.0] 4 1.0))
(expect-that "Try extend a list from 4 to 2 elements = Do nothing" (= [2.0 2.0 2.0 2.0]) (extend [2.0 2.0 2.0 2.0] 2 1.0))
(expect-that "Try extend a list from 4 to 4 elements = Do nothing" (= [2.0 2.0 2.0 2.0]) (extend [2.0 2.0 2.0 2.0] 4 1.0))
(expect-that "Try extend a list from 0 to 0 elements = Do nothing" (= []) (extend [] 0 1.0))
(expect-that "Try extend a list from 0 to 4 elements" (= [1.0 1.0 1.0 1.0]) (extend [] 4 1.0))

;extend-like
(expect-that "Extend a list to 4 elements" (= [2.0 2.0 1.0 1.0]) (extend-like [2.0 2.0] [1 2 3 4] 1.0))
(expect-that "Try extend a list from 4 to 2 elements = Do nothing" (= [2.0 2.0 2.0 2.0]) (extend-like [2.0 2.0 2.0 2.0] [1 2] 1.0))
(expect-that "Try extend a list from 4 to 4 elements = Do nothing" (= [2.0 2.0 2.0 2.0]) (extend-like [2.0 2.0 2.0 2.0] [1 2 3 4] 1.0))
(expect-that "Try extend a list from 0 to 0 elements = Do nothing" (= []) (extend-like [] [] 1.0))
(expect-that "Try extend a list from 0 to 4 elements" (= [1.0 1.0 1.0 1.0]) (extend-like [] [1 2 3 4] 1.0))


;Insert first
(expect-that "Insert test in front" (= ["test", "a", "b","c"]) (insert-first ["a","b","c"] "test"))
(expect-that "Insert test in front of an empty list"  (= ["test"]) (insert-first [] "test"))

;Append-last
(expect-that "Append test in last" (= ["a", "b","c", "test"]) (append-last ["a","b","c"] "test"))
(expect-that "Append test in last of an empty list" (= ["test"]) (append-last [] "test"))

; Insert at
(expect-failure "Negative index must fail" "out of bounds" (insert-at ["a"] -1 "test"))
(expect-failure "Out of bounds index must fail" "out of bounds" (insert-at ["a"] 2 "test"))
(expect-failure "Out of bounds index must fail" "out of bounds" (insert-at ["a","b"] 3 "test"))

(expect-that "Insert at position 0" (= ["test", "a", "b", "c"]) (insert-at ["a","b","c"] 0 "test"))
(expect-that "Insert at position 1" (= ["a", "test", "b", "c"]) (insert-at ["a","b","c"] 1 "test"))
(expect-that "Insert at position 2" (= ["a", "b", "test", "c"]) (insert-at ["a","b","c"] 2 "test"))
(expect-that "Insert at position 3" (= ["a", "b", "c", "test"]) (insert-at ["a","b","c"] 3 "test"))

; Insert-at*
(expect-failure "Negative index must fail" "out of bounds" (insert-at* ["a"] -1 "test" "def"))
(expect-that "Add one default element" (= ["a" "def" "test"]) (insert-at* ["a"] 2 "test" "def"))
(expect-that "Add 2 default elements" (= ["a" "def" "def" "test"]) (insert-at* ["a"] 3 "test" "def"))

(expect-that "Insert at position 0" (= ["test", "a", "b", "c"]) (insert-at* ["a","b","c"] 0 "test" "def"))
(expect-that "Insert at position 1" (= ["a", "test", "b", "c"]) (insert-at* ["a","b","c"] 1 "test" "def"))
(expect-that "Insert at position 2" (= ["a", "b", "test", "c"]) (insert-at* ["a","b","c"] 2 "test" "def"))
(expect-that "Insert at position 3" (= ["a", "b", "c", "test"]) (insert-at* ["a","b","c"] 3 "test" "def"))

;replace-first
(expect-failure "Empty list must fail" "empty" (replace-first [] "test"))
(expect-that "Replace test in front" (= ["test", "b","c"]) (replace-first ["a","b","c"] "test"))
(expect-that "Replace test in front of a single item list" (= ["test"]) (replace-first ["a"] "test"))

;replace-last
(expect-failure "Empty list must fail" "empty" (replace-last [] "test"))
(expect-that "Replace test in last" (= ["a", "b", "test"]) (replace-last ["a","b","c"] "test"))
(expect-that "Replace test in last of a single item list" (= ["test"]) (replace-last ["a"] "test"))

;replace-at
(expect-failure "Empty list must fail" "out of bounds" (replace-at [] 0 "test"))
(expect-failure "Negative index must fail" "out of bounds" (replace-at ["a"] -1 "test"))
(expect-failure "Out of bounds index must fail" "out of bounds" (replace-at ["a"] 1 "test"))
(expect-failure "Out of bounds index must fail" "out of bounds" (replace-at ["a","b"] 2 "test"))

(expect-that "Replace at position 0" (= ["test","b", "c"]) (replace-at ["a","b","c"] 0 "test"))
(expect-that "Replace at position 1" (= ["a","test", "c"]) (replace-at ["a","b","c"] 1 "test"))
(expect-that "Replace at position 2" (= ["a","b", "test"]) (replace-at ["a","b","c"] 2 "test"))
(expect-that "Replace a single element list" (= ["test"]) (replace-at ["a"] 0 "test"))

;replace-at*
(expect-failure "Negative index must fail" "out of bounds" (replace-at* ["a"] -1 "test" "def"))

(expect-that "Replace en empty list" (= ["test"]) (replace-at* [] 0 "test" "def"))
(expect-that "Add one default element" (= ["a" "def" "test"]) (replace-at* ["a"] 2 "test" "def"))
(expect-that "Add 2 default elements" (= ["a" "def" "def" "test"]) (replace-at* ["a"] 3 "test" "def"))

(expect-that "Replace at position 0" (= ["test","b", "c"]) (replace-at* ["a","b","c"] 0 "test" "def"))
(expect-that "Replace at position 1" (= ["a","test", "c"]) (replace-at* ["a","b","c"] 1 "test" "def"))
(expect-that "Replace at position 2" (= ["a","b", "test"]) (replace-at* ["a","b","c"] 2 "test" "def"))
(expect-that "Replace a single element list" (= ["test"]) (replace-at* ["a"] 0 "test" "def"))


;replace-item
(expect-that "Replace a by test" (= ["test", "b", "c"]) (replace-item ["a","b","c"] "a" "test"))
(expect-that "Replace 2 times a by test" (= ["test", "b", "c", "test"]) (replace-item ["a","b","c","a"] "a" "test"))
(expect-that "Replace nothing" (= ["a", "b", "c"]) (replace-item ["a","b","c"] "d" "test"))

;replace-item*
(expect-that "Replace a by test" (= ["test", "b", "c"]) (replace-item* ["a","b","c"] "a" "test"))
(expect-that "Replace 2 times a by test" (= ["test", "b", "c", "test"]) (replace-item* ["a","b","c","a"] "a" "test"))
(expect-failure "Replace nothing" (replace-item* ["a","b","c"] "d" "test"))

;remove-first
(expect-failure "Empty list must fail" "empty" (remove-first []))
(expect-that "Remove item in front" (= ["b","c"]) (remove-first ["a","b","c"]))
(expect-that "Remove item in front of a single item list" (= []) (remove-first ["a"]))

;remove-last
(expect-failure "Empty list must fail" "empty" (remove-last []))
(expect-that "Remove item in last" (= ["a", "b"]) (remove-last ["a","b","c"]))
(expect-that "Remove item in last of a single item list" (= []) (remove-last ["a"]))

;remove-at
(expect-failure "Empty list must fail" "out of bounds" (remove-at [] 0))
(expect-failure "Negative index must fail" (remove-at ["a"] -1))
(expect-failure "Out of bounds index must fail" (remove-at ["a"] 1))
(expect-failure "Out of bounds index must fail" (remove-at ["a","b"]))

(expect-that "Remove at position 0" (= ["b", "c"]) (remove-at ["a","b","c"] 0))
(expect-that "Remove at position 1" (= ["a", "c"]) (remove-at ["a","b","c"] 1))
(expect-that "Remove at position 2" (= ["a","b" ]) (remove-at ["a","b","c"] 2))
(expect-that "Remove a single element list" (= []) (remove-at ["a"] 0))

;remove-item
(expect-that "Remove 1 item" (= ["b", "c"]) (remove-item ["a","b","c"] "a"))
(expect-that "Remove 2 items" (= ["b", "c"]) (remove-item ["a","b","c","a"] "a"))
(expect-that "Remove nothing" (= ["a", "b", "c"]) (remove-item ["a","b","c"] "d"))

;remove-item*
(expect-that "Remove 1 item" (= ["b", "c"]) (remove-item* ["a","b","c"] "a"))
(expect-that "Remove 2 items" (= ["b", "c"]) (remove-item* ["a","b","c","a"] "a"))
(expect-failure "Remove nothing" "not present" (remove-item* ["a","b","c"] "d"))

; shift-left
(expect-that "Shift a 1 sized list = Replace" (= ["x"]) (shift-left ["a"] "x"))
(expect-that "Shift a 2 sized list" (= ["b","x"]) (shift-left ["a","b"] "x"))
(expect-that "Shift a 3 sized list" (= ["b","c","x"]) (shift-left ["a","b","c"] "x"))
(expect-that "Shift a 4 sized list" (= ["b","c","d","x"]) (shift-left ["a","b","c","d"] "x"))
(expect-that "Double shift" (= ["c","d","x","y"]) (shift-left (shift-left ["a","b","c","d"] "x") "y"))

; shift-right
(expect-that "Shift a 1 sized list = Replace" (= ["x"]) (shift-right ["a"] "x"))
(expect-that "Shift a 2 sized list" (= ["x","a"]) (shift-right ["a","b"] "x"))
(expect-that "Shift a 3 sized list" (= ["x","a","b"]) (shift-right ["a","b","c"] "x"))
(expect-that "Shift a 4 sized list" (= ["x","a","b","c"]) (shift-right ["a","b","c","d"] "x"))
(expect-that "Double shift" (= ["y","x","a","b"]) (shift-right (shift-right ["a","b","c","d"] "x") "y"))

; roll-left
(expect-that "Roll a 1 sized list = Replace" (= ["a"]) (roll-left ["a"]))
(expect-that "Roll a 2 sized list" (= ["b","a"]) (roll-left ["a","b"]))
(expect-that "Roll a 3 sized list" (= ["b","c","a"]) (roll-left ["a","b","c"]))
(expect-that "Roll a 4 sized list" (= ["b","c","d","a"]) (roll-left ["a","b","c","d"]))
(expect-that "Double roll" (= ["c","d","a","b"]) (roll-left (roll-left ["a","b","c","d"])))


; fifo-push
(expect-that "Push into a an empty list, fifo size 1" (= ["x"]) (fifo-push []  1 "x"))
(expect-that "Push into a an empty list, fifo size 2" (= ["x"]) (fifo-push []  2 "x"))
(expect-that "Push into a an empty list, fifo size 10" (= ["x"]) (fifo-push []  10 "x"))

(expect-that "Push into a 1 sized list, fifo size 1" (= ["x"]) (fifo-push ["a"]  1 "x"))
(expect-that "Push into a 1 sized list, fifo size 2" (= ["a","x"]) (fifo-push ["a"]  2 "x"))
(expect-that "Push into a 1 sized list, fifo size 10" (= ["a","x"]) (fifo-push ["a"]  10 "x"))

(expect-that "Push into a 2 sized list, fifo size 1" (= ["b", "x"]) (fifo-push ["a","b"]  1 "x"))
(expect-that "Push into a 2 sized list, fifo size 2" (= ["b","x"]) (fifo-push ["a","b"]  2 "x"))
(expect-that "Push into a 2 sized list, fifo size 10" (= ["a","b", "x"]) (fifo-push ["a","b"]  10 "x"))

(expect-that "Push into a 9 sized list, fifo size 10" (= ["a", "b","c","d","e","f","g","h","i","x"]) (fifo-push ["a","b","c","d","e","f","g","h","i"]  10 "x"))
(expect-that "Push into a 10 sized list, fifo size 10" (= ["b","c","d","e","f","g","h","i","j","x"]) (fifo-push ["a","b","c","d","e","f","g","h","i","j"]  10 "x"))

(expect-that "Double push in a  9 sized list, fifo size 10" (= ["b","c","d","e","f","g","h","i","x","y"]) (fifo-push (fifo-push ["a","b","c","d","e","f","g","h","i"] 10 "x") 10 "y"))



(print "Tests of util-lists ended")
(commit-tx)
