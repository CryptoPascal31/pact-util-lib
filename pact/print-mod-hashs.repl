;SPDX-License-Identifier: MIT

; Define free namespace
(begin-tx)
(module b GOV
   (defcap GOV () true)
   (defconst GUARD_SUCCESS (create-user-guard (success)))
   (defun success () true)
)
(define-namespace 'free GUARD_SUCCESS GUARD_SUCCESS)
(commit-tx)

(begin-tx)
(namespace 'free)
(load "contracts/util-chain-data.pact")
(load "contracts/util-lists.pact")
(load "contracts/util-strings.pact")
(load "contracts/util-math.pact")
(load "contracts/util-random.pact")
(load "contracts/util-time.pact")
(load "contracts/util-fungible.pact")
(load "contracts/util-zk.pact")
(commit-tx)

(defun complement-spaces:string (x:string)
  (concat (make-list (- 21 (length x)) " ")))

(defun format-hash:string (item:string hash-value:string)
  (format "H:{}:{}{}" [item (complement-spaces item) hash-value])
)

(defun format-mod-hash:string (mod-name:string)
  (format-hash mod-name (at 'hash) (describe-module mod-name))
)

(defconst MOD-LIST  (map (+ "free.") ["util-chain-data",
                                    "util-lists",
                                    "util-strings",
                                    "util-math",
                                    "util-random",
                                    "util-time",
                                    "util-fungible",
                                    "util-zk"]))

(defconst HASHES (map (compose (describe-module )(at 'hash)) MOD-LIST))

(print (+ "\n" (free.util-strings.join "\n" (+ (zip (format-hash) MOD-LIST HASHES)
                                               [(format-hash "Global" (hash (concat HASHES)))]))))
