;SPDX-License-Identifier: MIT

(begin-tx)
(load "contracts/util-chain-data.pact")
(load "contracts/util-lists.pact")
(load "contracts/util-strings.pact")
(load "contracts/util-math.pact")
(load "contracts/util-random.pact")
(load "contracts/util-time.pact")
(load "contracts/util-fungible.pact")
(load "contracts/util-zk.pact")
(commit-tx)

(defun complement-spaces:string (x:string)
  (concat (make-list (- 16 (length x)) " ")))

(defun format-hash:string (item:string hash-value:string)
  (format "H:{}:{}{}" [item (complement-spaces item) hash-value])
)

(defun get-hash:string (mod-name:string)
  (compose (describe-module) (at 'hash) mod-name)
)

(defun format-mod-hash:string (mod-name:string)
  (format-hash mod-name (at 'hash) (describe-module mod-name))
)

(defconst MOD-LIST  ["util-chain-data",
                     "util-lists",
                     "util-strings",
                     "util-math",
                     "util-random",
                     "util-time",
                     "util-fungible",
                     "util-zk"])

(defconst HASHES (map (compose (describe-module )(at 'hash)) MOD-LIST))

(print (+ "\n" (util-strings.join "\n" (+ (zip (format-hash) MOD-LIST HASHES)
                                  [(format-hash "Global" (hash (concat HASHES)))]))))
